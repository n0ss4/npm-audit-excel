import { DEFAULT_CONFIG } from '../config';
import { VulnerabilityProcessor } from '../core/VulnerabilityProcessor';
import type { AuditReport } from '../types';

describe('VulnerabilityProcessor', () => {
  let processor: VulnerabilityProcessor;

  beforeEach(() => {
    processor = new VulnerabilityProcessor(DEFAULT_CONFIG);
  });

  describe('processAuditReport', () => {
    it('should process a simple vulnerability', () => {
      const auditData: AuditReport = {
        auditReportVersion: 2,
        metadata: {
          vulnerabilities: {
            info: 0,
            low: 1,
            moderate: 0,
            high: 0,
            critical: 0,
            total: 1,
          },
          dependencies: {
            prod: 10,
            dev: 20,
            optional: 0,
            peer: 0,
            peerOptional: 0,
            total: 30,
          },
        },
        vulnerabilities: {
          'test-package': {
            name: 'test-package',
            severity: 'low',
            isDirect: true,
            via: ['test-vulnerability'],
            effects: [],
            range: '<1.0.0',
            nodes: ['node_modules/test-package'],
            fixAvailable: true,
          },
        },
      };

      const result = processor.processAuditReport(auditData);

      expect(result).toHaveLength(1);
      expect(result[0].package).toBe('test-package');
      expect(result[0].severity).toBe('low');
      expect(result[0].isDirect).toBe(true);
      expect(result[0].priorityCategory).toBe('MEDIUM');
    });

    it('should calculate priority correctly for critical direct dependency', () => {
      const auditData: AuditReport = {
        auditReportVersion: 2,
        metadata: {
          vulnerabilities: {
            info: 0,
            low: 0,
            moderate: 0,
            high: 0,
            critical: 1,
            total: 1,
          },
          dependencies: {
            prod: 10,
            dev: 20,
            optional: 0,
            peer: 0,
            peerOptional: 0,
            total: 30,
          },
        },
        vulnerabilities: {
          'critical-package': {
            name: 'critical-package',
            severity: 'critical',
            isDirect: true,
            via: [
              {
                source: 1,
                name: 'critical-package',
                dependency: 'critical-package',
                title: 'Remote Code Execution',
                url: 'https://example.com/advisory',
                severity: 'critical',
                cwe: ['CWE-94'],
                cvss: {
                  score: 9.8,
                  vectorString: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
                },
                range: '<2.0.0',
              },
            ],
            effects: [],
            range: '<2.0.0',
            nodes: ['node_modules/critical-package'],
            fixAvailable: {
              name: 'critical-package',
              version: '2.0.0',
              isSemVerMajor: true,
            },
          },
        },
      };

      const result = processor.processAuditReport(auditData);

      expect(result[0].priorityCategory).toBe('URGENT');
      expect(result[0].priorityScore).toBeGreaterThanOrEqual(50);
      expect(result[0].cvssScore).toBe(9.8);
      expect(result[0].vulnerabilityTitle).toBe('Remote Code Execution');
    });

    it('should sort vulnerabilities by priority', () => {
      const auditData: AuditReport = {
        auditReportVersion: 2,
        metadata: {
          vulnerabilities: {
            info: 0,
            low: 1,
            moderate: 1,
            high: 1,
            critical: 0,
            total: 3,
          },
          dependencies: {
            prod: 10,
            dev: 20,
            optional: 0,
            peer: 0,
            peerOptional: 0,
            total: 30,
          },
        },
        vulnerabilities: {
          'low-package': {
            name: 'low-package',
            severity: 'low',
            isDirect: false,
            via: ['vulnerability'],
            effects: [],
            range: '<1.0.0',
            nodes: ['node_modules/low-package'],
            fixAvailable: false,
          },
          'high-package': {
            name: 'high-package',
            severity: 'high',
            isDirect: true,
            via: ['vulnerability'],
            effects: [],
            range: '<1.0.0',
            nodes: ['node_modules/high-package'],
            fixAvailable: true,
          },
          'moderate-package': {
            name: 'moderate-package',
            severity: 'moderate',
            isDirect: false,
            via: ['vulnerability'],
            effects: ['other-package'],
            range: '<1.0.0',
            nodes: ['node_modules/moderate-package'],
            fixAvailable: true,
          },
        },
      };

      const result = processor.processAuditReport(auditData);

      expect(result[0].package).toBe('high-package');
      expect(result[0].priorityCategory).toBe('URGENT');
      expect(result[1].package).toBe('moderate-package');
      expect(result[2].package).toBe('low-package');
    });

    it('should generate correct fix commands', () => {
      const auditData: AuditReport = {
        auditReportVersion: 2,
        metadata: {
          vulnerabilities: {
            info: 0,
            low: 2,
            moderate: 0,
            high: 0,
            critical: 0,
            total: 2,
          },
          dependencies: {
            prod: 10,
            dev: 20,
            optional: 0,
            peer: 0,
            peerOptional: 0,
            total: 30,
          },
        },
        vulnerabilities: {
          'direct-minor': {
            name: 'direct-minor',
            severity: 'low',
            isDirect: true,
            via: ['vulnerability'],
            effects: [],
            range: '<1.0.0',
            nodes: ['node_modules/direct-minor'],
            fixAvailable: {
              name: 'direct-minor',
              version: '1.0.1',
              isSemVerMajor: false,
            },
          },
          'direct-major': {
            name: 'direct-major',
            severity: 'low',
            isDirect: true,
            via: ['vulnerability'],
            effects: [],
            range: '<2.0.0',
            nodes: ['node_modules/direct-major'],
            fixAvailable: {
              name: 'direct-major',
              version: '2.0.0',
              isSemVerMajor: true,
            },
          },
        },
      };

      const result = processor.processAuditReport(auditData);

      const minorFix = result.find(v => v.package === 'direct-minor');
      const majorFix = result.find(v => v.package === 'direct-major');

      expect(minorFix?.fixCommand).toBe('npm update direct-minor');
      expect(majorFix?.fixCommand).toBe('npm install direct-major@2.0.0 --save');
    });
  });
});
